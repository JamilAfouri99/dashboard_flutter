openapi: 3.0.0
paths:
  /:
    get:
      operationId: getHello
      parameters: []
      responses:
        '200':
          description: You're not supposed to be here
        '500':
          description: Failed to connect to the database :(
      tags:
        - API Health Check
  /auth/signup:
    post:
      operationId: signup
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignupDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      tags: &ref_0
        - Auth
  /auth/signin:
    post:
      operationId: signin
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SigninDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      tags: *ref_0
  /auth/signin/access-token:
    post:
      operationId: signinUsingAccessToken
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      tags: *ref_0
      security:
        - bearer: []
  /auth/signin/refresh-token:
    post:
      operationId: signinUsingRefreshToken
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthUser'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      tags: *ref_0
      security:
        - bearer: []
  /auth/logout:
    post:
      operationId: logout
      parameters: []
      responses:
        '200':
          description: ''
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unauthorized'
      tags: *ref_0
      security:
        - bearer: []
  /users:
    get:
      operationId: getUsers
      parameters:
        - name: page
          required: false
          in: query
          example: 7
          schema:
            default: 1
            type: number
        - name: perPage
          required: false
          in: query
          example: 5
          schema:
            default: 20
            type: number
        - name: search
          required: false
          in: query
          example: Display Name
          description: Searching is currently supported for only the displayName property
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedUsers'
      tags: &ref_1
        - Users
      security: &ref_2
        - bearer: []
    post:
      operationId: createUser
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostUserDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags: *ref_1
      security: *ref_2
  /users/{userId}:
    get:
      operationId: getUserById
      parameters:
        - name: userId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      tags: *ref_1
      security: *ref_2
    patch:
      operationId: patchUser
      parameters:
        - name: userId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchUserResponseDto'
      tags: *ref_1
      security: *ref_2
    delete:
      operationId: deleteUser
      parameters:
        - name: userId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      responses:
        '204':
          description: User has been deleted
        '404':
          description: No user with that id in the group
      tags: *ref_1
      security: *ref_2
  /users/{userId}/files:
    post:
      operationId: postUserFiles
      parameters:
        - name: userId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      requestBody:
        required: true
        description: A file that must be of type image, a and has size less than 5MB.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostUserFilesDto'
      responses:
        '204':
          headers:
            X-Location:
              description: Contains the URL of the uploaded file
          description: ''
      tags: *ref_1
      security: *ref_2
    delete:
      operationId: deleteUserFiles
      parameters:
        - name: userId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      requestBody:
        required: true
        description: >-
          Specify which files are to be deleted by sending the file field with a
          value of "true" 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserFilesDto'
      responses:
        '204':
          description: ''
      tags: *ref_1
      security: *ref_2
  /users/{userId}/profile/{profileId}:
    patch:
      operationId: patchUserProfile
      parameters:
        - name: userId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
        - name: profileId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserProfileDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserProfile'
      tags: *ref_1
      security: *ref_2
  /users/{userId}/profile/{profileId}/files:
    post:
      operationId: postUserProfileFiles
      parameters:
        - name: userId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
        - name: profileId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      requestBody:
        required: true
        description: A file that must be of type image, and has a size less than 5MB.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostUserProfileFilesDto'
      responses:
        '204':
          headers:
            X-Location:
              description: Contains the URL of the uploaded file
          description: ''
      tags: *ref_1
      security: *ref_2
    delete:
      operationId: deleteUserProfileFiles
      parameters:
        - name: userId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
        - name: profileId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      requestBody:
        required: true
        description: >-
          Specify which files are to be deleted by sending the file field with a
          value of "true" 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteUserProfileFilesDto'
      responses:
        '204':
          description: ''
      tags: *ref_1
      security: *ref_2
  /users/{userId}/profile:
    get:
      operationId: getPublicUser
      parameters:
        - name: userId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublicUser'
      tags:
        - Users
  /groups/{groupId}:
    patch:
      operationId: patchUserGroup
      parameters:
        - name: groupId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchGroupDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PatchGroupResponseDto'
      tags: &ref_3
        - Groups
      security: &ref_4
        - bearer: []
  /groups/{groupId}/profile/{profileId}/files:
    post:
      operationId: postGroupFiles
      parameters:
        - name: groupId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
        - name: profileId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      requestBody:
        required: true
        description: A file that must be of type image, a and has size less than 5MB.
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PostGroupProfileFilesDto'
      responses:
        '204':
          headers:
            X-Location:
              description: Contains the URL of the uploaded file
          description: ''
      tags: *ref_3
      security: *ref_4
  /groups/{userId}/profile/{profileId}/files:
    delete:
      operationId: deleteUserProfileFiles
      parameters:
        - name: groupId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
        - name: profileId
          required: true
          in: path
          example: xXx7xXx7xXx7xXx7
          schema:
            type: string
      requestBody:
        required: true
        description: >-
          Specify which files are to be deleted by sending the file field with a
          value of "true" 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteGroupProfileFilesDto'
      responses:
        '204':
          description: ''
      tags: *ref_3
      security: *ref_4
  /contact:
    post:
      operationId: postContactForm
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostContactFormDto'
      responses:
        '201':
          description: ''
      tags:
        - Contact
info:
  title: QCarder API
  description: This document will act as a guide for the publicly supported endpoints
  version: 0.3.0
  contact: {}
tags: []
servers: []
components:
  securitySchemes:
    bearer:
      scheme: bearer
      bearerFormat: JWT
      type: http
  schemas:
    SignupDto:
      type: object
      properties:
        email:
          type: string
          example: test@test.com
        password:
          type: string
          example: password
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
      required:
        - email
        - password
        - firstName
        - lastName
    AuthUser:
      type: object
      properties:
        id:
          type: string
          example: xXx7xXx7xXx7xXx7
        createdAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        updatedAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        email:
          type: string
          example: test@test.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        avatar:
          type: string
          example: image-url.png
          nullable: true
        role:
          type: string
          example: USER
          enum: &ref_5
            - USER
            - OWNER
            - ADMIN
            - SUPERADMIN
        status:
          type: string
          example: INACTIVE
          enum: &ref_6
            - ACTIVE
            - INACTIVE
        groupId:
          type: string
          example: xXx7xXx7xXx7xXx7
          nullable: true
        access_token:
          type: string
          example: JWT
        refresh_token:
          type: string
          example: JWT
      required:
        - id
        - createdAt
        - updatedAt
        - email
        - firstName
        - lastName
        - avatar
        - role
        - status
        - groupId
        - access_token
        - refresh_token
    Unauthorized:
      type: object
      properties:
        statusCode:
          type: number
          example: 401
        message:
          type: string
          example: Unauthorized
      required:
        - statusCode
        - message
    SigninDto:
      type: object
      properties:
        email:
          type: string
          example: test@test.com
        password:
          type: string
          example: password
      required:
        - email
        - password
    GroupProfile:
      type: object
      properties:
        id:
          type: string
          example: xXx7xXx7xXx7xXx7
        createdAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        updatedAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        groupId:
          type: string
          example: xXx7xXx7xXx7xXx7
        banner:
          type: string
          example: image-url.png
          nullable: true
      required:
        - id
        - createdAt
        - updatedAt
        - groupId
        - banner
    Group:
      type: object
      properties:
        id:
          type: string
          example: xXx7xXx7xXx7xXx7
        createdAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        updatedAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        name:
          type: string
          example: QCarder
          nullable: true
        profile:
          $ref: '#/components/schemas/GroupProfile'
      required:
        - id
        - createdAt
        - updatedAt
        - name
        - profile
    Email:
      type: object
      properties:
        email:
          type: string
          example: test@test.com
        label:
          type: string
          example: Work
      required:
        - email
        - label
    PhoneNumber:
      type: object
      properties:
        phoneNumber:
          type: string
          example: '+962799999999'
        country:
          type: string
          example: jo
        label:
          type: string
          example: Work
      required:
        - phoneNumber
        - country
        - label
    Link:
      type: object
      properties:
        link:
          type: string
          example: url
        label:
          type: string
          enum:
            - Facebook
            - GitHub
            - Gmail
            - Instagram
            - Link
            - LinkedIn
            - OutLook
            - QCarder
            - Skype
            - Slack
            - WhatsApp
            - X
          example: LinkedIn
      required:
        - link
        - label
    UserProfile:
      type: object
      properties:
        id:
          type: string
          example: xXx7xXx7xXx7xXx7
        createdAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        updatedAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        userId:
          type: string
          example: xXx7xXx7xXx7xXx7
        displayName:
          type: string
          example: John Doe
          nullable: true
        banner:
          type: string
          example: image-url.png
          nullable: true
        title:
          type: string
          example: Software Engineer
          nullable: true
        company:
          type: string
          example: QCarder
          nullable: true
        birthday:
          format: date-time
          type: string
          example: '2023-06-16T18:06:16.070Z'
          nullable: true
        address:
          type: string
          example: Address
          nullable: true
        notes:
          type: string
          example: Notes
          nullable: true
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - id
        - createdAt
        - updatedAt
        - userId
        - displayName
        - banner
        - title
        - company
        - birthday
        - address
        - notes
        - emails
        - phoneNumbers
        - links
    User:
      type: object
      properties:
        id:
          type: string
          example: xXx7xXx7xXx7xXx7
        createdAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        updatedAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        email:
          type: string
          example: test@test.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        avatar:
          type: string
          example: image-url.png
          nullable: true
        role:
          type: string
          example: USER
          enum: *ref_5
        status:
          type: string
          example: INACTIVE
          enum: *ref_6
        group:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/Group'
        groupId:
          type: string
          example: xXx7xXx7xXx7xXx7
          nullable: true
        profile:
          $ref: '#/components/schemas/UserProfile'
      required:
        - id
        - createdAt
        - updatedAt
        - email
        - firstName
        - lastName
        - avatar
        - role
        - status
        - group
        - groupId
        - profile
    PaginationMetaData:
      type: object
      properties:
        total:
          type: number
          example: 50
        lastPage:
          type: number
          example: 5
        currentPage:
          type: number
          example: 3
        perPage:
          type: number
          example: 10
        prev:
          type: number
          example: 2
          nullable: true
        next:
          type: number
          example: 4
          nullable: true
      required:
        - total
        - lastPage
        - currentPage
        - perPage
        - prev
        - next
    PaginatedUsers:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/User'
        meta:
          $ref: '#/components/schemas/PaginationMetaData'
      required:
        - data
        - meta
    PatchUserProfileDto:
      type: object
      properties:
        displayName:
          type: string
          example: John Doe
          nullable: true
        title:
          type: string
          example: Software Engineer
          nullable: true
        company:
          type: string
          example: QCarder
          nullable: true
        birthday:
          format: date-time
          type: string
          example: '2023-06-16T18:06:16.070Z'
          nullable: true
        address:
          type: string
          example: Address
          nullable: true
        notes:
          type: string
          example: Notes
          nullable: true
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
    PostUserDto:
      type: object
      properties:
        email:
          type: string
          example: test@test.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        profile:
          $ref: '#/components/schemas/PatchUserProfileDto'
      required:
        - email
        - firstName
        - lastName
    PatchUserDto:
      type: object
      properties:
        email:
          type: string
          example: test@test.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        role:
          type: string
          example: USER
          enum: *ref_5
        status:
          type: string
          example: INACTIVE
          enum: *ref_6
    PatchUserResponseDto:
      type: object
      properties:
        id:
          type: string
          example: xXx7xXx7xXx7xXx7
        createdAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        updatedAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        email:
          type: string
          example: test@test.com
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        avatar:
          type: string
          example: image-url.png
          nullable: true
        role:
          type: string
          example: USER
          enum: *ref_5
        status:
          type: string
          example: INACTIVE
          enum: *ref_6
        groupId:
          type: string
          example: xXx7xXx7xXx7xXx7
          nullable: true
    PostUserFilesDto:
      type: object
      properties:
        avatar:
          type: string
          format: binary
      required:
        - avatar
    DeleteUserFilesDto:
      type: object
      properties:
        avatar:
          type: boolean
          example: true
      required:
        - avatar
    PostUserProfileFilesDto:
      type: object
      properties:
        banner:
          type: string
          format: binary
      required:
        - banner
    DeleteUserProfileFilesDto:
      type: object
      properties:
        banner:
          type: boolean
          example: true
      required:
        - banner
    PublicGroupProfile:
      type: object
      properties:
        banner:
          type: string
          example: image-url.png
          nullable: true
      required:
        - banner
    PublicGroup:
      type: object
      properties:
        name:
          type: string
          example: QCarder
          nullable: true
        profile:
          $ref: '#/components/schemas/PublicGroupProfile'
      required:
        - name
        - profile
    PublicUserProfile:
      type: object
      properties:
        displayName:
          type: string
          example: John Doe
          nullable: true
        banner:
          type: string
          example: image-url.png
          nullable: true
        title:
          type: string
          example: Software Engineer
          nullable: true
        company:
          type: string
          example: QCarder
          nullable: true
        birthday:
          format: date-time
          type: string
          example: '2023-06-16T18:06:16.070Z'
          nullable: true
        address:
          type: string
          example: Address
          nullable: true
        notes:
          type: string
          example: Notes
          nullable: true
        emails:
          type: array
          items:
            $ref: '#/components/schemas/Email'
        phoneNumbers:
          type: array
          items:
            $ref: '#/components/schemas/PhoneNumber'
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - displayName
        - banner
        - title
        - company
        - birthday
        - address
        - notes
        - emails
        - phoneNumbers
        - links
    PublicUser:
      type: object
      properties:
        avatar:
          type: string
          example: image-url.png
          nullable: true
        group:
          nullable: true
          allOf:
            - $ref: '#/components/schemas/PublicGroup'
        profile:
          $ref: '#/components/schemas/PublicUserProfile'
      required:
        - avatar
        - group
        - profile
    PatchGroupDto:
      type: object
      properties:
        name:
          type: string
          example: QCarder
          nullable: true
    PatchGroupResponseDto:
      type: object
      properties:
        id:
          type: string
          example: xXx7xXx7xXx7xXx7
        createdAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        updatedAt:
          format: date-time
          type: string
          example: '2023-07-07T21:07:17.173Z'
        name:
          type: string
          example: QCarder
          nullable: true
    PostGroupProfileFilesDto:
      type: object
      properties:
        banner:
          type: string
          format: binary
      required:
        - banner
    DeleteGroupProfileFilesDto:
      type: object
      properties:
        banner:
          type: boolean
          example: true
      required:
        - banner
    PostContactFormDto:
      type: object
      properties:
        fullName:
          type: string
          example: John Doe
        email:
          type: string
          example: test@test.com
        phoneNumber:
          type: string
          example: '+962799999999'
        city:
          type: string
          example: Amman, Jordan.
        message:
          type: string
          example: Hello there!
        honeypot:
          type: string
          example: I am a honeypot
      required:
        - fullName
        - email
        - phoneNumber
        - city
        - message
